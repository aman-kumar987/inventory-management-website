You are a professional full-stack developer. Build a **secure, scalable Inventory Management Web App** using the following technologies:

* **Backend**: Node.js + Express
* **Frontend**: EJS (with layout structure), TailwindCSS, JavaScript
* **Database**: PostgreSQL using Prisma ORM

---

### ✅ GENERAL REQUIREMENTS

* Strictly follow **role-based access control** for 4 user types: Super Admin, Cluster Manager, User, Viewer.
* Use **real-time calculation** of `Total` in inventory.
* Enable **soft delete** for all main entities (users, items, plants, clusters, inventory, etc.) with **cascading delete logic** and **undo soft delete** by Super Admin.
* Maintain **change history** for all user edits and entity updates (field-wise).
* Send **email notifications** via Nodemailer (e.g., scrap approval).
* Implement **Excel Import/Export** feature using `xlsx` or `SheetJS`, with user-selectable format templates.
* Include **scrap approval workflow** (UI + Email) with status control.
* Ensure all CRUD + list pages are **searchable**, **paginated**, and **responsive**.

---

### 🔐 SECURITY & VAPT GUIDELINES (Must-Have)

Implement the following:

* Use **helmet.js**, **express-rate-limit**, **express-validator**, and **csrf** middleware.
* Validate all incoming request data using **express-validator**.
* Encrypt passwords with **bcrypt**.
* Use **parameterized Prisma queries** to prevent SQL injection.
* Sanitize HTML output where necessary (like remarks) to prevent XSS.
* Implement proper **session management** using secure `express-session`.
* Apply **RBAC-based middleware** to protect endpoints.
* Add **server-side logs** for all unauthorized access attempts and important operations.
* Enable **Audit Logging** in the database for all critical actions (deletes, updates, logins, approvals).
* Prevent **mass assignment vulnerabilities** by explicitly setting allowed fields in updates.
* Secure upload/import features to only allow `.xlsx` files and scan contents before parsing.
* Rate limit login and registration endpoints.
* Maintain an `activity_logs` table to track user actions (for audit trail).

---

### 🗂️ FOLDER STRUCTURE (Organized for MVC)

```
inventory-management-app/
├── src/
│   ├── config/
│   │   └── db.js
│   │   └── mailer.js
│   │   └── csrf.js
│   ├── controllers/
│   ├── middleware/
│   │   └── auth.js
│   │   └── rbac.js
│   │   └── errorHandler.js
│   ├── routes/
│   │   └── authRoutes.js
│   │   └── userRoutes.js
│   │   └── clusterRoutes.js
│   │   └── plantRoutes.js
│   │   └── itemRoutes.js
│   │   └── inventoryRoutes.js
│   │   └── consumptionRoutes.js
│   ├── services/
│   │   └── inventoryService.js
│   │   └── emailService.js
│   ├── views/
│   │   ├── layout.ejs
│   │   ├── partials/
│   │   ├── auth/
│   │   ├── dashboard/
│   │   ├── inventory/
│   │   ├── consumption/
│   │   ├── users/
│   │   └── master/
│   ├── prisma/
│   │   └── schema.prisma
│   └── public/
│       ├── css/
│       ├── js/
│       └── uploads/
├── .env
├── app.js
├── package.json
```

---

### 🧩 PRISMA SCHEMA DESIGN (PostgreSQL)

Define models with the following structure:

#### `User`

```prisma
model User {
  id               String   @id @default(uuid())
  name             String
  email            String   @unique
  password         String
  role             Role
  status           UserStatus @default(ACTIVE)
  isDeleted        Boolean  @default(false)
  plantId          String
  clusterId        String?
  plant            Plant    @relation(fields: [plantId], references: [id])
  cluster          Cluster? @relation(fields: [clusterId], references: [id])
  createdBy        String?
  createdAt        DateTime @default(now())
  updatedBy        String?
  updatedAt        DateTime @updatedAt
  lastUpdateLogin  String?
}
```

#### `Cluster`

```prisma
model Cluster {
  id          String   @id @default(uuid())
  name        String
  plants      Plant[]
  users       User[]
  isDeleted   Boolean  @default(false)
  createdBy   String?
  createdAt   DateTime @default(now())
  updatedBy   String?
  updatedAt   DateTime @updatedAt
  lastUpdateLogin String?
}
```

#### `Plant`

```prisma
model Plant {
  id        String   @id @default(uuid())
  name      String
  clusterId String
  cluster   Cluster  @relation(fields: [clusterId], references: [id])
  users     User[]
  inventory Inventory[]
  isDeleted Boolean  @default(false)
  createdBy   String?
  createdAt   DateTime @default(now())
  updatedBy   String?
  updatedAt   DateTime @updatedAt
  lastUpdateLogin String?
}
```

#### `ItemGroup`, `Item`, `Inventory`, `Consumption`, `ChangeHistory`, etc.

Structure these based on your earlier schema breakdown, maintaining:

* Foreign keys for associations
* Soft delete fields (`isDeleted`)
* Audit columns
* Enum types (for role, status, etc.)

---

### 🎨 EJS LAYOUT STRUCTURE

Use a base layout `layout.ejs`:

```html
<!DOCTYPE html>
<html lang="en">
<head>
  <%- include('./partials/head') %>
</head>
<body class="bg-gray-50 text-gray-800">
  <%- include('./partials/navbar') %>
  <main class="p-4">
    <%- body %>
  </main>
</body>
</html>
```

Each view (dashboard, auth, inventory, etc.) will extend this layout.

---

### ✅ SPECIAL FUNCTIONALITY

* **Cluster Assignment Requests**: When a new Cluster Manager registers, they choose only a Plant. A request is generated to the Super Admin to assign a `clusterId`. Show pending requests in a separate admin section.
* **Scrap Quantity Approval**: If scrap quantity is edited, request goes to Cluster Manager. Update inventory only after approval.
* **Notifications System**: For approvals, deletions, etc., both via UI and email.

---

### 📄 MOCKUP REFERENCE

Refer to the provided **wireframe mockups** to ensure:

* Consistent layout
* Sidebar navigation
* Add/Edit modals or forms
* Notification icons
* Dashboard stats and quick actions

---

Once you begin, structure the project module-by-module:

1. Auth
2. Master tables
3. Inventory & Consumption
4. Notifications
5. Excel Import/Export
6. Change history
7. UI polish & QA

Make sure to validate and sanitize every field. Always test VAPT concerns (SQLi, XSS, CSRF, IDOR, etc.).

---

Let me know when you're ready to initiate development with the starter code and Prisma schema — I’ll prepare that too.
